var searchIndex = {};
searchIndex['rpf'] = {"items":[[0,"","rpf","rpf is a framework to help create Rust programs",null,null],[3,"Prog","","A structure for storing program information",null,null],[12,"name","","Name of program",0,null],[12,"vers","","Version of program",0,null],[12,"yr","","Year of copyright for program",0,null],[4,"ExitStatus","","Enum used for setting exit statuses",null,null],[13,"Ok","","",1,null],[13,"Error","","",1,null],[13,"OptError","","",1,null],[13,"ArgError","","",1,null],[4,"Color","","Wrapper for `ansi_term::Colour`",null,null],[13,"Black","","",2,null],[13,"Red","","",2,null],[13,"Green","","",2,null],[13,"Yellow","","",2,null],[13,"Blue","","",2,null],[13,"Purple","","",2,null],[13,"Cyan","","",2,null],[13,"White","","",2,null],[11,"as_path","collections::string","",3,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"as_pathbuf","","",3,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"copyright","rpf","Prints copyright, version, and author information",0,null],[11,"prog_try","","Used for when no arguments are given to a util",0,{"inputs":[{"name":"prog"}],"output":null}],[11,"exit","","Wrapper for `process::exit`, immediately exits the process with the set\nexit status.",0,{"inputs":[{"name":"prog"},{"name":"exitstatus"}],"output":null}],[11,"is_dot","std::path","",4,{"inputs":[{"name":"pathbuf"}],"output":{"name":"bool"}}],[11,"last_component","","",4,{"inputs":[{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"first_component","","",4,{"inputs":[{"name":"pathbuf"}],"output":{"name":"option"}}],[11,"as_str","","",4,{"inputs":[{"name":"pathbuf"}],"output":{"name":"str"}}],[11,"as_string","","",4,{"inputs":[{"name":"pathbuf"}],"output":{"name":"string"}}],[11,"is_dot","","",5,{"inputs":[{"name":"path"}],"output":{"name":"bool"}}],[11,"last_component","","",5,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"first_component","","",5,{"inputs":[{"name":"path"}],"output":{"name":"option"}}],[11,"as_str","","",5,{"inputs":[{"name":"path"}],"output":{"name":"str"}}],[11,"as_string","","",5,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[11,"clone","rpf","",1,{"inputs":[{"name":"exitstatus"}],"output":{"name":"exitstatus"}}],[11,"error","","",0,{"inputs":[{"name":"prog"},{"name":"t"},{"name":"exitstatus"}],"output":null}],[11,"path_error","","",0,{"inputs":[{"name":"prog"},{"name":"t"},{"name":"pathbuf"}],"output":null}],[0,"as_path","","",null,null],[8,"AsPath","rpf::as_path","A trait for treating String and str as `Path` and `PathBuf`",null,null],[10,"as_path","","Returns a borrowed `Path`",6,{"inputs":[{"name":"aspath"}],"output":{"name":"path"}}],[10,"as_pathbuf","","Returns a `PathBuf`",6,{"inputs":[{"name":"aspath"}],"output":{"name":"pathbuf"}}],[0,"prog","rpf","",null,null],[3,"Prog","rpf::prog","A structure for storing program information",null,null],[12,"name","","Name of program",0,null],[12,"vers","","Version of program",0,null],[12,"yr","","Year of copyright for program",0,null],[0,"pathmod","rpf","",null,null],[8,"PathMod","rpf::pathmod","Adds some useful functions for manipulating and retrieving information from\npaths",null,null],[10,"is_dot","","Returns true if the path's file name starts with a \".\"",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"bool"}}],[10,"last_component","","Returns a `PathBuf` of `&self`'s last component",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"option"}}],[10,"first_component","","Returns a `PathBuf` of `&self`'s first component",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"option"}}],[10,"as_str","","Returns a `&str` for a path, returns a blank string if unable to\nget a string for the path",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"str"}}],[10,"as_string","","Returns a `String` for a path, returns an empty string if unable to get\na string for a path",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"string"}}],[0,"status","rpf","",null,null],[4,"ExitStatus","rpf::status","Enum used for setting exit statuses",null,null],[13,"Ok","","",1,null],[13,"Error","","",1,null],[13,"OptError","","",1,null],[13,"ArgError","","",1,null],[8,"Exit","","Causes a `Prog` struct to exit using an error and exit status",null,null],[10,"error","","Used for errors, prints error messages in red terminal font and calls\n`rpf::Exit::exit`",8,{"inputs":[{"name":"exit"},{"name":"t"},{"name":"exitstatus"}],"output":null}],[10,"path_error","","Used for errors when working with paths, works similar to `error`",8,{"inputs":[{"name":"exit"},{"name":"t"},{"name":"pathbuf"}],"output":null}],[0,"styled","rpf","",null,null],[4,"Color","rpf::styled","Wrapper for `ansi_term::Colour`",null,null],[13,"Black","","",2,null],[13,"Red","","",2,null],[13,"Green","","",2,null],[13,"Yellow","","",2,null],[13,"Blue","","",2,null],[13,"Purple","","",2,null],[13,"Cyan","","",2,null],[13,"White","","",2,null],[8,"Styled","","Trait for creating stylized console printing using `ansi_term`",null,null],[10,"bold","","Creates a bold `ANSIString`",9,{"inputs":[{"name":"styled"}],"output":{"name":"ansistring"}}],[10,"underline","","Creates an underlined `ANSIString`",9,{"inputs":[{"name":"styled"}],"output":{"name":"ansistring"}}],[10,"paint","","Paints a given string with the color given",9,{"inputs":[{"name":"styled"},{"name":"color"}],"output":{"name":"ansistring"}}],[0,"test","rpf","",null,null],[5,"remove","rpf::test","Removes a directory or file and all of its contents.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"create_file","","Creates a file",null,{"inputs":[{"name":"f"}],"output":null}],[5,"create_dir","","Creates a directory",null,{"inputs":[{"name":"f"}],"output":null}],[5,"create_symlink","","",null,{"inputs":[{"name":"f"},{"name":"t"}],"output":null}],[8,"AsPath","rpf","A trait for treating String and str as `Path` and `PathBuf`",null,null],[10,"as_path","","Returns a borrowed `Path`",6,{"inputs":[{"name":"aspath"}],"output":{"name":"path"}}],[10,"as_pathbuf","","Returns a `PathBuf`",6,{"inputs":[{"name":"aspath"}],"output":{"name":"pathbuf"}}],[8,"Exit","","Causes a `Prog` struct to exit using an error and exit status",null,null],[10,"error","","Used for errors, prints error messages in red terminal font and calls\n`rpf::Exit::exit`",8,{"inputs":[{"name":"exit"},{"name":"t"},{"name":"exitstatus"}],"output":null}],[10,"path_error","","Used for errors when working with paths, works similar to `error`",8,{"inputs":[{"name":"exit"},{"name":"t"},{"name":"pathbuf"}],"output":null}],[8,"Styled","","Trait for creating stylized console printing using `ansi_term`",null,null],[10,"bold","","Creates a bold `ANSIString`",9,{"inputs":[{"name":"styled"}],"output":{"name":"ansistring"}}],[10,"underline","","Creates an underlined `ANSIString`",9,{"inputs":[{"name":"styled"}],"output":{"name":"ansistring"}}],[10,"paint","","Paints a given string with the color given",9,{"inputs":[{"name":"styled"},{"name":"color"}],"output":{"name":"ansistring"}}],[8,"PathMod","","Adds some useful functions for manipulating and retrieving information from\npaths",null,null],[10,"is_dot","","Returns true if the path's file name starts with a \".\"",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"bool"}}],[10,"last_component","","Returns a `PathBuf` of `&self`'s last component",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"option"}}],[10,"first_component","","Returns a `PathBuf` of `&self`'s first component",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"option"}}],[10,"as_str","","Returns a `&str` for a path, returns a blank string if unable to\nget a string for the path",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"str"}}],[10,"as_string","","Returns a `String` for a path, returns an empty string if unable to get\na string for a path",7,{"inputs":[{"name":"pathmod"}],"output":{"name":"string"}}]],"paths":[[3,"Prog"],[4,"ExitStatus"],[4,"Color"],[3,"String"],[3,"PathBuf"],[3,"Path"],[8,"AsPath"],[8,"PathMod"],[8,"Exit"],[8,"Styled"]]};
searchIndex['ansi_term'] = {"items":[[0,"","ansi_term","This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.",null,null],[3,"ANSIString","","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","",0,null],[13,"Red","","",0,null],[13,"Green","","",0,null],[13,"Yellow","","",0,null],[13,"Blue","","",0,null],[13,"Purple","","",0,null],[13,"Cyan","","",0,null],[13,"White","","",0,null],[13,"Fixed","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"ansistring"}],"output":{"name":"ansistring"}}],[11,"new","","Creates a new ANSI String with the given contents and style.",1,{"inputs":[{"name":"ansistring"},{"name":"str"},{"name":"style"}],"output":{"name":"ansistring"}}],[11,"fmt","","",1,{"inputs":[{"name":"ansistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"colour"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"colour"}],"output":{"name":"colour"}}],[11,"eq","","",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don't have to use Blue.normal() just\nto get blue text.",0,{"inputs":[{"name":"colour"},{"name":"str"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"style"}}],[11,"fmt","","",2,{"inputs":[{"name":"style"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Style with no differences.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",2,{"inputs":[{"name":"style"},{"name":"str"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",2,{"inputs":[{"name":"style"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"fmt","","",3,{"inputs":[{"name":"ansistrings"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Colour"],[3,"ANSIString"],[3,"Style"],[3,"ANSIStrings"]]};
initSearch(searchIndex);
